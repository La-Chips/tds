<?php

namespace controllers;

use Ubiquity\attributes\items\router\Get;
use Ubiquity\attributes\items\router\Post;
use Ubiquity\attributes\items\router\Route;
use Ubiquity\cache\CacheManager;
use Ubiquity\controllers\Router;
use Ubiquity\utils\http\URequest;
use Ubiquity\utils\http\USession;

/**
 * Controller TodosController
 */

class TodosController extends ControllerBase
{
  const CACHE_KEY = 'datas/lists/';
  const EMPTY_LIST_ID = 'not saved';
  const LIST_SESSION_KEY = 'list';
  const ACTIVE_LIST_SESSION_KEY = 'active-list';

  #[Route(path: "_default", name: 'home')]
  public function index()
  {

    $this->showMessage('Bienvenue !', 'TodoLists permet de gerer des listes...', 'info', 'info circle outline');
    $this->displayList(USession::get(self::LIST_SESSION_KEY));
  }


  public function initialize()
  {
    parent::initialize(); // TODO: Change the autogenerated stub
    $this->menu();
  }


  #[Post(path: "todos/loadList/", name: "todos.loadListPost")]
  public function loadListFromForm()
  {
  }

  #[Get(path: "todos/loadList/{uniqid}", name: "todos.loadList")]
  public function loadList(int $uniqid)
  {
  }

  #[Get(path: "todos/save", name: "todos.save")]
  public function saveList()
  {
    $id = uniqid();
    $list = USession::get(self::LIST_SESSION_KEY);
    CacheManager::$cache->store(self::CACHE_KEY . $id, $list);

    $this->showMessage("Liste Sauvegardée", $id);
    $this->displayList($list);
  }
  #[Get(path: "todos/new/{force}", name: "todos.new")]
  public function newlist($force = false)
  {
    if ($force != false || !USession::exists(self::LIST_SESSION_KEY)) {
      USession::set(self::LIST_SESSION_KEY, []);
      $this->showMessage("Liste correctement crée", self::LIST_SESSION_KEY . " a été correctement crée", "", "");
    } else if (USession::exists(self::LIST_SESSION_KEY)) {
      $this->showMessage(
        "Nouvelle Liste",
        "Une liste existe déjà. Voulez vous la vider ?",
        "",
        "",
        [
          ['url' => Router::path('todos.new', [1]), 'caption' => 'Créer une nouvelle liste', 'style' => 'basic inverted'],
          ['url' => Router::path('todos.menu'), 'caption' => 'Annuler', 'style' => 'basic inverted']
        ]
      );
    }
    $this->displayList(USession::get(self::LIST_SESSION_KEY));
  }



  #[Post(path: "todos/add", name: "todos.add")]
  public function addElement()
  {

    $list = USession::get(self::LIST_SESSION_KEY);
    if (URequest::filled('elements')) {
      $elemnts = explode("\n", URequest::post('elements'));
      foreach ($elemnts as $elm) {
        $list[] = $elm;
      }
    } else {
      $list[] = URequest::post('element');
    }
    USession::set(self::LIST_SESSION_KEY, $list);
    $this->displayList($list);
  }


  #[Get(path: "todos/deleteElement/{index}", name: "todos.delete")]
  public function deleteElement($index)
  {
    $list = USession::get(self::LIST_SESSION_KEY);
    array_splice($list, $index, 1);
    USession::set(self::LIST_SESSION_KEY, $list);
    $this->displayList($list);
  }


  #[Post(path: "todos/editElement/{index}", name: "todos.edit")]
  public function editElement($index)
  {
    $list = USession::get(self::LIST_SESSION_KEY);
    $list[$index] = URequest::post('element');
    USession::set(self::LIST_SESSION_KEY, $list);
  }


  public function menu()
  {

    $this->loadView('TodosController/menu.html');
  }

  private function displayList($list)
  {
    $this->loadView('TodosController/displayList.html', ['list' => $list]);
  }

  private function showMessage(string $header, string $message, string $type = '', string $icon = 'info circle', array $buttons = [])
  {
    $this->loadView('TodosController/showMessage.html', compact('header', 'type', 'icon', 'message', 'buttons'));
  }
}
//